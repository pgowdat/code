/*************************************************************

    Following is the Binary Tree node structure

    template <typename T>

    class BinaryTreeNode
    {
    public :
        T data;
        BinaryTreeNode<T> *left;
        BinaryTreeNode<T> *right;

        BinaryTreeNode(T data) {
            this -> data = data;
            left = NULL;
            right = NULL;
        }

        ~BinaryTreeNode() {
            if (left)
            {
                delete left;
            }
            if (right)
            {
                delete right;
            }
        }
    };

*************************************************************/

pair<int,int> predecessorSuccessor(BinaryTreeNode<int>* root, int key)
{
    BinaryTreeNode<int>* temp = root;
    int pred = -1;
    int succ = -1;
    
    while(temp->data != key){
        if(temp->data < key){
            pred = temp->data;
            temp = temp->right;
        }
        else{
            succ = temp->data;
            temp = temp->left;
        }
    }
    
    BinaryTreeNode<int>* leftnode = temp->left;
    while(leftnode!=NULL){
        pred = leftnode->data;
        leftnode = leftnode->right;
    }
    
    BinaryTreeNode<int>* rightnode = temp->right;
    while(rightnode!=NULL){
        succ = rightnode->data;
        rightnode = rightnode->left;
    }
    
    pair<int,int>mp = make_pair(pred,succ);
    
    return mp;

}
