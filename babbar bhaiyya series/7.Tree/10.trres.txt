#include <bits/stdc++.h>
using namespace std;

class node{
public:
    int data;
    node* left;
    node* right;
    
    node(int d){
        this->data = d;
        this->left = NULL;
        this->right = NULL;
    }
};

node* createtree(node* root){
    cout<<"enter data :";
    int x;
    cin>>x;
    root = new node(x);
    if(x==-1){
        return NULL;
    }
    cout<<"enter to left of "<<root->data<<endl;
    root->left = createtree(root->left);
    cout<<"enter to right of "<<root->data<<endl;
    root->right = createtree(root->right);
    
    return root;
}

void levelorder(node* root){
    
    queue<node*>q;
    q.push(root);
    q.push(NULL);
    
    
    while(!q.empty()){
        node* temp = q.front();
        q.pop();
        if(temp==NULL){
            cout<<endl;
            
            if(!q.empty()){
                q.push(NULL);
            }
        }
        else{
            cout<<temp->data<<" ";
            if(temp->left){
                q.push(temp->left);
            }
            if(temp->right){
                q.push(temp->right);
            }
        }
    }
}

void preorder(node* root){
    if(root==NULL){
        return ;
    }
    
    cout<<root->data<<" ";
    preorder(root->left);
    preorder(root->right);
}

void inorder(node* root, int &cnt){
    if(root==NULL){
        return ;
    }
    
    inorder(root->left, cnt);
    if(root->left==NULL && root->right==NULL){
    cnt++;    
    }
    
    inorder(root->right,cnt);
}

int findheight(node* node){
    if(node==NULL){
        return 0;
    }
    
    int left = findheight(node->left);
    int right = findheight(node->right);
    int ans = max(left,right)+1;
    return ans;
}

int countleaf(node* root){
    int cnt = 0;
    inorder(root, cnt);
    return cnt;
}
void postorder(node* root){
    if(root==NULL){
        return ;
    }
    
    postorder(root->left);
    postorder(root->right);    
    cout<<root->data<<" ";
}

pair<int,int>diameterfast(node* root){
    if(root==NULL){
        pair<int,int>p = make_pair(0,0);
        return p;
    }
    
    pair<int,int>left = diameterfast(root->left);
    pair<int,int>right = diameterfast(root->right);
    
    int op1 = left.first;
    int op2 = right.first;
    int op3 = left.second+right.second+1;
    pair<int,int>ans;
    ans.first = max(op1,max(op2,op3));
    ans.second = max(left.second, right.second)+1;
    
    return ans;
    
    
}
int diameter(node* root){
    return diameterfast(root).first;
}

int main()
{
    
int n = 5;
int *q = new(nothrow) int[n];
if(!q)
    cout<<"allocation failed";
else{
    for (int i=0; i<n; i++)
        q[i] = i+1;
    for(int i=0; i<n; i++)
        cout<<q[i]<<" ";
}
delete[] q;
return 0;

return 0;
}