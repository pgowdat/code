#include <bits/stdc++.h>
using namespace std;

class node{
public:
    int data;
    node* left;
    node* right;
    
    node(int data){
        this->data = data;
        this->left = NULL;
        this->right = NULL;
    }
};

node* insertdata(node* root){
    cout<<"enter the data "<<endl;
    int x;
    cin>>x;
    root = new node(x);
    
    if(x==-1){
        return NULL;
    }
    cout<<"enter data to insert left of "<<x<<endl;
    root->left = insertdata(root->left);
    cout<<"enter to right of "<<x<<endl;
    root->right = insertdata(root->right);
    return root;
}

void levelOrderTraversal(node* root) {
    queue<node*> q;
    q.push(root);
    q.push(NULL);

    while(!q.empty()) {
        node* temp = q.front();
        q.pop();

        if(temp == NULL) { 
            //purana level complete traverse ho chuka hai
            cout << endl;
            if(!q.empty()) { 
                //queue still has some child ndoes
                q.push(NULL);
            }  
        }
        else{
            cout << temp -> data << " ";
            if(temp ->left) {
                q.push(temp ->left);
            }

            if(temp ->right) {
                q.push(temp ->right);
            }
        }
    }

}

void inorder(node* root){
    if(root==NULL){
        return;
    }
    inorder(root->left);
    cout<<root->data<<" ";
    inorder(root->right);
}

void preorder(node* root){
    if(root==NULL){
        return;
    }
    cout<<root->data<<" ";
    preorder(root->left);
    preorder(root->right);
}

void postorder(node* root){
    if(root==NULL){
        return;
    }
    postorder(root->left);
    postorder(root->right);
    cout<<root->data<<" ";
}

void buildfromlevel(node* &root){
    queue<node*> q;
    cout<<"enter data: "<<endl;
    int x;
    cin>>x;
    root = new node(x);
    q.push(root);
    
    while(!q.empty()){
        node* temp = q.front();
        q.pop();
        
        int leftdata;
        cout<<"enter data to left of "<<temp->data;
        cin>>leftdata;
        if(leftdata!=-1){
            temp->left = new node(leftdata);
            q.push(temp->left);
        }
        
        int rightdata;
        cout<<"enter data to right of "<<temp->data;
        cin>>rightdata;
        if(rightdata!=-1){
            temp->right = new node(rightdata);
            q.push(temp->right);
        }
    }
}

int main()
{
    
    node* root = NULL;
    buildfromlevel(root);
    cout<<endl;
    levelOrderTraversal(root);
    /*node* root = NULL;
    
    root = insertdata(root);
    
    levelOrderTraversal(root);
    
    cout<<endl;
    inorder(root);
    
    cout<<endl;
    preorder(root);
    
    cout<<endl;
    postorder(root);*/
    
return 0;
}