// CPP to find nim-game winner
#include <bits/stdc++.h>
using namespace std;

int binarysearch(int arr[], int n,int key){
    int s=0;
    int e=n-1;
    int mid = s+(e-s)/2;
    while(s<=e){
        mid = s+(e-s)/2;
        if(arr[mid]==key){
            cout<<"found";
        }
        if(arr[mid]<key){
            s=mid+1;
        }
        else{
            e=mid-1;
        }
    }
    
}

int firstoccurance(int arr[], int n, int key){
     int s=0;
    int e=n-1;
    int ans = 0;
    int mid = s+(e-s)/2;
    while(s<=e){
        mid = s+(e-s)/2;
        if(arr[mid]==key){
            ans = mid;
            e = mid-1;
        }
        else if(arr[mid]<key){
            s=mid+1;
        }
        else{
            e=mid-1;
        }
    }
    return ans;
}
int lastoccurance(int arr[], int n, int key){
    int s=0;
    int e=n-1;
    int ans = 0;
    int mid = s+(e-s)/2;
    while(s<=e){
        mid = s+(e-s)/2;
        if(arr[mid]==key){
            ans = mid;
            s = mid+1;
        }
        else if(arr[mid]<key){
            s=mid+1;
        }
        else{
            e=mid-1;
        }
    }
    return ans;
}

void mountain(int arr[], int n){
    int s=0;
    int e = n-1;
    int mid = s+(e-s)/2;
    while(s<e){
        mid = s+(e-s)/2;
        if(arr[mid]<arr[mid+1]){
            s = mid+1;
        }
        else{
            e=mid;
        }
    }
    cout<<arr[s];
}

int pivot(int arr[], int n){
    int s=0;
    int e=n-1;
    int mid = s+(e-s)/2;
    while(s<e){
        mid = s+(e-s)/2;
        if(arr[mid]>arr[0]){
            s=mid+1;
        }
        else{
            e=mid;
        }
    }
    return s;
}

int findroot(int k){
    int s=0;
    int e=k-1;
    int ans=0;
    int mid=s+(e-s)/2;
    while(s<=e){
        mid=s+(e-s)/2;
        
        if(mid*mid==k){
            ans = mid;
            break;
        }
        else if(mid*mid<k){
            ans = mid;
            s = mid+1;
        }
        else{
            e=mid-1;
        }
    }
    return ans;
}
void precise(int key, int pre, int soln){
    double factor = 1;
    double ans = soln;
    for(int i=0; i<pre; i++){
        factor = factor/10;
        for(double j=ans; j*j<key; j=j+factor){
            ans=j;
        }
    }
    cout<<ans;
}
int main()
{
	int n;
    cin>>n;
    /*int a[100];
    for(int i=0; i<n; i++){
        cin>>a[i];
    }*/
    int sol = findroot(n);
    precise(n,3,sol);

}
