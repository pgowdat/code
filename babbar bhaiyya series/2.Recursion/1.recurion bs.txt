// CPP to find nim-game winner
#include <bits/stdc++.h>
using namespace std;

int factorial(int n){
    if(n==0){
        return 1;
    }
    return n*factorial(n-1);
}

int powernum(int n){
    if(n==0){
        return 1;
    }
    
    return 2*powernum(n-1);
}

void printnum(int n){
    if(n==0){
        return ;
    }
    printnum(n-1);
    cout<<n;
    
}

int fibonacci(int n){
    if(n==1){
        return 1;
    }
    if(n==0){
        return 0;
    }
    
    return fibonacci(n-1)+fibonacci(n-2);
}
bool issorted(int arr[], int s){
    if(s==0 || s==1){
        return true;
    }
    if(arr[0]>arr[1]){
        return false;
    }
    else{
        bool ans = issorted(arr+1, s-1);
    return ans;
    }
    
}
void converttostring(int n, string arr[]){
    if(n==0){
        return;
    }
    
    int ans = n%10;
    string s = arr[ans];
    converttostring(n/10,arr);
    
    cout<<s<<" ";
    
    
}
int sums(int arr[], int n){
    
    if(n==0){
        return 0;
    }
    if(n==1){
        return arr[0];
    }
    int ans = arr[0]+sums(arr+1,n-1);
    return ans;
}

int linearssearch(int arr[], int n, int k){
    if(n==0){
        return 0;
    }
    if(arr[0]==k){
        return 1;
    }
    else{
        return linearssearch(arr+1,n-1,k);
    }
}

int binarysearch(int arr[], int s, int e,int k){
    
    if(s>e){
        return 0;
    }
    int mid = s+(e-s)/2;
    if (arr[mid]==k){
        return 1;
    }
    if(arr[mid]<k){
        return binarysearch(arr,mid+1,e,k);
    }
    else{
        return binarysearch(arr,s,mid-1,k);
    }
}

int firstocur(int arr[], int s, int e,int k){
    if(s>e){
        return 0;
    }
    int mid = s+(e-s)/2;
    if (k>arr[mid-1]&&arr[mid]==k){
        return mid;
    }
    else if(arr[mid]==k){
        return firstocur(arr,s,mid-1,k);
    }
    else if(arr[mid]<k){
        return firstocur(arr,mid+1,e,k);
    }
    else{
        return firstocur(arr,s,mid-1,k);
    }

}

int lastocur(int arr[], int s, int e,int k,int n){
    if(s>e){
        return -1;
    }
    int mid = s+(e-s)/2;
    if ((mid == n-1 || k<arr[mid+1]) && arr[mid]==k){
        return mid;
    }

    else if(k<arr[mid]){
        return lastocur(arr,s,(mid-1),k,n);
    }
    else{
        return lastocur(arr,mid+1,e,k,n);
    }

}

int peak(int arr[],int s, int e){
    if(s>=e){
        return 0;
    }
    int mid = s+(e-s)/2;
    if(arr[mid-1]<arr[mid] && arr[mid]>arr[mid+1] ){
        return mid;
    }
    else if(arr[mid]<arr[mid+1]){
        return peak(arr,mid+1,e);
    }
    else{
        return peak(arr,s,mid);
    }
}

int pivot(int arr[], int s, int e){
    if(s>=e){
        return s;
    }
    int mid = s+(e-s)/2;
    if(arr[0]>arr[mid]){
        return pivot(arr,s,mid);
    }
    else 
    {
        return pivot(arr,mid+1,e);
    }

}
int main()
{
int n;
cin>>n;
int a[100];
for(int i=0; i<n; i++){
    cin>>a[i];
}
int b=pivot(a,0,n-1);
cout<<a[b];
/*int k;
cin>>k;
cout<<firstocur(a,0,n-1,k)<<" "<<lastocur(a,0,n-1,k,n);*/
}
