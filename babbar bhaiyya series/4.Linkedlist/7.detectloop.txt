#include <bits/stdc++.h>
#include<iostream>
using namespace std;

class Node{
public:
    int data;
    Node* next;
    
    Node(int data){
        this->data = data;
        this->next = NULL;
    }
    
    ~Node(){
        int value = this->data;
        if(this->next!=NULL){
            delete next;
            this->next = NULL;
        }
        cout<<"deleted "<<value<<endl;
    }
};

void insertathead(Node* &head, int d){
    Node* temp = new Node(d);
    temp->next = head;
    head = temp;
}

void insertattail(Node* &tail, int d){
    Node* temp = new Node(d);
    tail->next = temp;
    tail = tail->next;
}

void insertatposition(Node* &tail,Node* &head, int position, int d){
    
    if(position ==1){
        insertathead(head,d);
        return;
    }
    Node* temp = head;
    int cnt = 1;
    
    while(cnt<position-1){
        temp = temp->next;
        cnt++;
    }
    
    if(temp->next == NULL){
        insertattail(tail,d);
        return;
    }
    
    Node* Nodeinsert = new Node(d);
    
    Nodeinsert->next = temp->next;
    
    temp->next = Nodeinsert;
}

void print(Node* &head){
    Node* temp = head;
    
    while(temp!=NULL){
        cout<<temp->data<<" ";
        temp = temp->next;
    }
    cout<<endl;
}

bool detectloop(Node* head){
    if(head==NULL){
       return false; 
    }
    map<Node*, bool>visited;
    Node*temp = head;
    while(temp!=NULL){
        
        if(visited[temp]==true){
            cout<<"loop detected at "<<temp->data<<endl;
            return true;
        }
        visited[temp] = true;
        temp = temp->next;
    }
    
    return false;
}

Node* floyddetect(Node* head){
    if(head==NULL){
        return NULL;
    }
    
    Node* slow = head;
    Node* fast = head;
    
    while(slow!=NULL && fast!=NULL){
        fast = fast->next;
        if(fast!=NULL){
            fast=fast->next;
            
        slow = slow->next;
        
        if(slow==fast){
            cout<<"present at "<<slow->data<<endl;
            return slow;
        }
        }
    }
    return NULL;
}

Node* getstartnode(Node* head){
    if(head==NULL){
        return NULL;
    }
    
    Node* intersection = floyddetect(head);
    Node* slow = head;
    
    while(slow!=intersection){
        slow = slow->next;
        intersection = intersection->next;
    }
    
    return slow;
}

void removeloop(Node* head){
    if(head==NULL){
        return ;
    }
    
    Node* startofloop = getstartnode(head);
    Node* temp =startofloop;
    
    while(temp->next != startofloop){
        temp = temp->next;
    }
    
    temp->next = NULL;
}

int main()
{
Node* node1 = new Node(10);
//cout<<node1->data<<endl;
//cout<<node1->next<<endl;
    
    Node* head = node1;
    Node* tail = node1;
    
    insertattail(tail, 12);
    
    insertathead(head, 13);
    
    insertattail(tail,15);
    
    insertatposition(tail,head,2, 17);
print(head);   
 tail->next = head->next;
    
    if(floyddetect(head)){
        cout<<"cycle is present "<<endl;
    }
    else{
        cout<<"cycle not denorm_present ";
    }
    
    Node* p =getstartnode(head);
    cout<<"loop at "<<p->data <<endl;

    removeloop(head);
    print(head);
 
 return 0;
}
