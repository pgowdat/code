// CPP to find nim-game winner
#include <bits/stdc++.h>
using namespace std;

class Node{
public:
    int data;
    Node* next;
    Node* prev;
    
    Node(int d){
        this->data = d;
        this->prev = NULL;
        this->next = NULL;
    }
    
    ~Node(){
        int val = this->data;
        if(next != NULL){
            delete next;
            next = NULL;
        }
        cout<<"deleted "<<val<<endl;
    }
};

void print(Node* &head){
    Node* temp = head;
    
    while(temp!=NULL){
        cout<<temp->data<<" ";
        temp = temp->next;
    }
    cout<<endl;
}

void insertathead(Node* &head,Node* &tail,int d){
    if(head == NULL){
        Node* temp = new Node(d);
        head = temp;
        tail = temp;
    }else{
    Node* temp = new Node(d);
    temp->next = head;
    head->prev = temp;
    head = temp;
} 
}

void insertattail(Node* &head, Node* &tail, int d){
   if(tail==NULL){
       Node* temp = new Node(d);
       tail = temp;
       head = temp;
   }
else{
    Node* temp = new Node(d);
    temp->prev = tail;
    tail->next = temp;
    tail = temp;
}
}



void insertatposition(Node* &tail, Node* &head, int position, int d){
    
    if(position==1){
        insertathead(head,tail, d);
    return;
    }
    
    int cnt =1;
    Node* temp = head;
    while(cnt<position-1){
        temp = temp->next;
        cnt++;
    }
    if(temp->next == NULL){
        insertattail(head,tail,d);
        return;
    }
    Node* nodetoinsert = new Node(d);
    nodetoinsert->next = temp->next;
    nodetoinsert->prev = temp;
    temp->next->prev = nodetoinsert;
    temp->next = nodetoinsert;
    
}

void deletenode(int position, Node* &head, Node* &tail){
    
    if(position ==1){
        Node* temp = head;
        temp->next->prev = NULL;
        head = temp->next;
        temp->next = NULL;
        delete temp;
    }
    else{
        Node* curr=head;
        Node* previ = NULL;
        int cnt = 1;
        while(cnt<position){
            previ = curr;
            curr = curr->next;
            cnt++;
        }
        if(curr->next==NULL){
            previ->next = NULL;
            curr->prev = NULL;
            delete curr;
            tail = previ;
        }
        else{
        previ->next = curr->next;
        curr->next->prev = previ;
        curr->next = NULL;
        curr->prev = NULL;
        delete curr;
    }
}
}
int main()
{
    //Node* node1 = new Node(10);
    Node* head = NULL;
    Node* tail = NULL;
    
    insertathead(head,tail, 12);
    print(head);
        cout<<"head: "<<head->data<<" tail "<<tail->data<<endl;

    insertathead(head,tail, 15);
    print(head);
        cout<<"head: "<<head->data<<" tail "<<tail->data<<endl;

    insertattail(head,tail,20);
    print(head);
        cout<<"head: "<<head->data<<" tail "<<tail->data<<endl;

    insertattail(head,tail,30);
    print(head);
        cout<<"head: "<<head->data<<" tail "<<tail->data<<endl;

    insertatposition(tail,head,5,17);
    print(head);
        cout<<"head: "<<head->data<<" tail "<<tail->data<<endl;

    deletenode(5, head, tail);
    print(head);
        cout<<"head: "<<head->data<<" tail "<<tail->data<<endl;

 return 0;
}
